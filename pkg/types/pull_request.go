// Copyright 2020 Authors of Cilium
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package types

type PullRequest struct {
	ReleaseNote  string
	ReleaseLabel string
	AuthorName   string
	// BackportBranches contains all the backport-done labels present in the
	// PullRequest.
	BackportBranches []string
}


// BackportPRs maps a backport type PR to the upstream PRs
type BackportPRs map[int]PullRequests

// PullRequests map a pull request number to a PullRequest
type PullRequests map[int]PullRequest

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in BackportPRs) DeepCopyInto(out *BackportPRs) {
	{
		in := &in
		*out = make(BackportPRs, len(*in))
		for key, val := range *in {
			var outVal map[int]PullRequest
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = make(PullRequests, len(*in))
				for key, val := range *in {
					(*out)[key] = *val.DeepCopy()
				}
			}
			(*out)[key] = outVal
		}
		return
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BackportPRs.
func (in BackportPRs) DeepCopy() BackportPRs {
	if in == nil {
		return nil
	}
	out := new(BackportPRs)
	in.DeepCopyInto(out)
	return *out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PullRequest) DeepCopyInto(out *PullRequest) {
	*out = *in
	if in.BackportBranches != nil {
		in, out := &in.BackportBranches, &out.BackportBranches
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PullRequest.
func (in *PullRequest) DeepCopy() *PullRequest {
	if in == nil {
		return nil
	}
	out := new(PullRequest)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in PullRequests) DeepCopyInto(out *PullRequests) {
	{
		in := &in
		*out = make(PullRequests, len(*in))
		for key, val := range *in {
			(*out)[key] = *val.DeepCopy()
		}
		return
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PullRequests.
func (in PullRequests) DeepCopy() PullRequests {
	if in == nil {
		return nil
	}
	out := new(PullRequests)
	in.DeepCopyInto(out)
	return *out
}
